name: CI - Messaging App Tests & Code Quality

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'messaging_app/**'

jobs:
  lint:
    name: Linting (flake8)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Run flake8 linting
      working-directory: messaging_app
      run: |
        echo "Running flake8 code quality checks..."
        flake8 . \
          --count \
          --select=E9,F63,F7,F82 \
          --show-source \
          --statistics \
          --exit-zero
        
        echo ""
        echo "Running full flake8 check (will fail on errors)..."
        flake8 . \
          --count \
          --max-line-length=100 \
          --statistics \
          --show-source \
          --exclude=.git,__pycache__,venv,.venv,migrations
      continue-on-error: false
    
    - name: Generate flake8 report
      if: always()
      working-directory: messaging_app
      run: |
        flake8 . \
          --format=json \
          --exclude=.git,__pycache__,venv,.venv,migrations \
          > flake8-report.json || true
        echo "Flake8 report generated"
    
    - name: Upload flake8 report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: flake8-report
        path: messaging_app/flake8-report.json

  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: messaging_app_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev
    
    - name: Install Python dependencies
      working-directory: messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-django coverage
    
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" -u"test_user" -p"test_password" --silent; then
            echo "MySQL is ready"
            exit 0
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 1
        done
        echo "MySQL failed to start"
        exit 1
    
    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE messaging_app_test;"
        mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON messaging_app_test.* TO 'test_user'@'%' IDENTIFIED BY 'test_password';"
    
    - name: Run pytest with coverage
      working-directory: messaging_app
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_DATABASE: messaging_app_test
        MYSQL_USER: test_user
        MYSQL_PASSWORD: test_password
      run: |
        pytest tests/ \
          --junitxml=test-results.xml \
          --cov=. \
          --cov-report=xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --html=test-report.html \
          --self-contained-html \
          -v
    
    - name: Display coverage summary
      if: always()
      working-directory: messaging_app
      run: |
        echo "=== Coverage Report ==="
        coverage report
    
    - name: Upload test results XML
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: messaging_app/test-results.xml
    
    - name: Upload coverage XML
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-xml-py${{ matrix.python-version }}
        path: messaging_app/coverage.xml
    
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-html-py${{ matrix.python-version }}
        path: messaging_app/htmlcov/
    
    - name: Upload HTML test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: html-test-report-py${{ matrix.python-version }}
        path: messaging_app/test-report.html
    
    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request' && always()
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, test]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Display code quality summary
      run: |
        echo "=== Code Quality Check Summary ==="
        echo ""
        echo "âœ… Linting: flake8 check completed"
        echo "âœ… Testing: pytest completed"
        echo "âœ… Coverage: reports generated"
        echo ""
        echo "ðŸ“Š Artifacts available:"
        echo "  - Flake8 Report: flake8-report/"
        echo "  - Test Results: test-results-py*/"
        echo "  - Coverage HTML: coverage-html-py*/"
        echo "  - Coverage XML: coverage-xml-py*/"
        echo "  - Test Report: html-test-report-py*/"
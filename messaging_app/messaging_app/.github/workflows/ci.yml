name: CI - Messaging App Tests

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'messaging_app/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'messaging_app/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: messaging_app_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev
    
    - name: Install Python dependencies
      working-directory: messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-django
    
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" -u"test_user" -p"test_password" --silent; then
            echo "MySQL is ready"
            exit 0
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 1
        done
        echo "MySQL failed to start"
        exit 1
    
    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE messaging_app_test;"
        mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON messaging_app_test.* TO 'test_user'@'%' IDENTIFIED BY 'test_password';"
    
    - name: Run pytest tests
      working-directory: messaging_app
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_DATABASE: messaging_app_test
        MYSQL_USER: test_user
        MYSQL_PASSWORD: test_password
      run: |
        pytest tests/ \
          --junitxml=test-results.xml \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --html=test-report.html \
          --self-contained-html \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: messaging_app/test-results.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-py${{ matrix.python-version }}
        path: messaging_app/htmlcov/
    
    - name: Upload HTML test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: html-test-report-py${{ matrix.python-version }}
        path: messaging_app/test-report.html
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: messaging_app/test-results.xml
        check_name: Test Results (Python ${{ matrix.python-version }})
    
    - name: Code coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60
#!/bin/bash

# kubctl-0x01 - Kubernetes Scaling and Load Testing Script
# This script scales the Django app and performs load testing

set -e  # Exit on any error

CLUSTER_NAME="messaging-app-cluster"
DEPLOYMENT_NAME="django-messaging-app"
SERVICE_NAME="django-messaging-service"
REPLICAS=3
LOAD_TEST_DURATION="30s"
LOAD_TEST_THREADS=4
LOAD_TEST_CONNECTIONS=100

# Set kubectl context to kind cluster
kubectl config use-context kind-${CLUSTER_NAME} 2>/dev/null || true

echo "================================================"
echo "Kubernetes Scaling and Load Testing Script"
echo "================================================"
echo ""

# Check if deployment exists
echo "[1/6] Checking if deployment exists..."
if ! kubectl get deployment "$DEPLOYMENT_NAME" &> /dev/null; then
    echo "ERROR: Deployment '$DEPLOYMENT_NAME' not found!"
    echo "Please deploy the application first using: kubectl apply -f deployment.yaml"
    exit 1
else
    echo "✓ Deployment '$DEPLOYMENT_NAME' found"
fi

# Scale the deployment
echo ""
echo "[2/6] Scaling deployment to $REPLICAS replicas..."
kubectl scale deployment "$DEPLOYMENT_NAME" --replicas="$REPLICAS"
echo "✓ Deployment scaled to $REPLICAS replicas"

# Wait for pods to be ready
echo ""
echo "[3/6] Waiting for all pods to be ready..."
kubectl wait --for=condition=ready pod -l app=django-messaging --timeout=300s
echo "✓ All pods are ready"

# Verify pods are running
echo ""
echo "[4/6] Verifying that multiple pods are running..."
echo "----------------------------------------"
kubectl get pods -l app=django-messaging -o wide
echo "----------------------------------------"
RUNNING_PODS=$(kubectl get pods -l app=django-messaging --field-selector=status.phase=Running --no-headers | wc -l)
echo "✓ Number of running pods: $RUNNING_PODS"

# Check if wrk is installed for load testing
echo ""
echo "[5/6] Performing load testing with wrk..."
if ! command -v wrk &> /dev/null; then
    echo "WARNING: wrk is not installed!"
    echo "Please install wrk for load testing:"
    echo "  - Ubuntu/Debian: sudo apt-get install wrk"
    echo "  - macOS: brew install wrk"
    echo "  - Or build from source: https://github.com/wg/wrk"
    echo ""
    echo "Skipping load test..."
else
    # Get the service URL
    echo "Setting up port forwarding to access the service..."
    
    # Kill any existing port-forward process on port 8000
    pkill -f "port-forward.*$SERVICE_NAME" || true
    sleep 2
    
    # Start port forwarding in background
    kubectl port-forward service/"$SERVICE_NAME" 8000:8000 &
    PORT_FORWARD_PID=$!
    
    # Wait for port forwarding to be ready
    echo "Waiting for port forwarding to be ready..."
    sleep 5
    
    # Run load test
    echo ""
    echo "Running load test with wrk..."
    echo "  Duration: $LOAD_TEST_DURATION"
    echo "  Threads: $LOAD_TEST_THREADS"
    echo "  Connections: $LOAD_TEST_CONNECTIONS"
    echo "----------------------------------------"
    
    wrk -t"$LOAD_TEST_THREADS" -c"$LOAD_TEST_CONNECTIONS" -d"$LOAD_TEST_DURATION" \
        --latency http://localhost:8000/ || echo "Load test completed with warnings"
    
    echo "----------------------------------------"
    echo "✓ Load test completed"
    
    # Clean up port forwarding
    kill $PORT_FORWARD_PID 2>/dev/null || true
fi

# Monitor resource usage
echo ""
echo "[6/6] Monitoring resource usage with kubectl top..."

# Check if metrics-server is available
if ! kubectl top nodes &> /dev/null; then
    echo "WARNING: Metrics server is not available!"
    echo "Installing metrics server for minikube..."
    minikube addons enable metrics-server
    echo "Waiting for metrics server to be ready..."
    sleep 30
fi

echo ""
echo "Node Resource Usage:"
echo "----------------------------------------"
kubectl top nodes || echo "Unable to retrieve node metrics yet"
echo "----------------------------------------"

echo ""
echo "Pod Resource Usage:"
echo "----------------------------------------"
kubectl top pods -l app=django-messaging || echo "Unable to retrieve pod metrics yet (metrics may need a few minutes to populate)"
echo "----------------------------------------"

# Summary
echo ""
echo "================================================"
echo "Scaling and Load Testing Complete!"
echo "================================================"
echo ""
echo "Current Status:"
echo "  - Deployment: $DEPLOYMENT_NAME"
echo "  - Desired Replicas: $REPLICAS"
echo "  - Running Pods: $RUNNING_PODS"
echo ""
echo "Useful Commands:"
echo "  - View pod details: kubectl describe pods -l app=django-messaging"
echo "  - View pod logs: kubectl logs -l app=django-messaging --tail=50"
echo "  - View specific pod logs: kubectl logs <pod-name>"
echo "  - Scale down: kubectl scale deployment $DEPLOYMENT_NAME --replicas=1"
echo "  - Monitor resources: kubectl top pods -l app=django-messaging"
echo "  - Access service: kubectl port-forward service/$SERVICE_NAME 8000:8000"
echo ""
echo "================================================"